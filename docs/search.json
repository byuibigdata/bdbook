[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Big Data Programming for Data Scientists",
    "section": "",
    "text": "Preface\nThis ‘book’ is primarily a place for the BYU-I data science program to store material used in their Big Data Class. It is a work in progress."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "As an introduction, we highlight the different elements of data science when using big data. This section focuses on high level concepts and descriptions."
  },
  {
    "objectID": "intro/bigdata.html#note-about-the-class-data",
    "href": "intro/bigdata.html#note-about-the-class-data",
    "title": "1  What is Big Data?",
    "section": "1.1 Note about the class data",
    "text": "1.1 Note about the class data\nWe will limit our data sizes to less than a terabyte in total with the largest tables in the 100 GB range. This is not big data in the sense of the term. However, it is large enough to require a different approach to data analysis than what you have learned in previous courses. We will use the term big data to refer to the data we will use in this course. We will focus on the tools and techniques used on big data for analysis. At times these tools could be slower than some of the modern tools for medium data like polars mentioned above. However, the tools we will use are scalable to much larger data sizes and will be useful for your future work.\n\n1.1.1 Dump truck analogy\nWe want to figure out how move and shape data with big data tools. We need to learn to drive the massive mining dump truck imagining the massive loads. When the load is manageable in a small truck, nobody would ever try to drive a mining dump truck down neighborhood roads to help a friend move. You will be tempted to drop into polars or pandas if you focus on the size of the load we will use in the class as the data can get small enough to fit into those packages and routines. Stay firmly in the dump truck and learn to drive it. You will need to drive the dump truck when you get into industry."
  },
  {
    "objectID": "intro/tools.html#distributed-file-systems",
    "href": "intro/tools.html#distributed-file-systems",
    "title": "2  The Big Data Tools",
    "section": "2.1 Distributed File Systems",
    "text": "2.1 Distributed File Systems"
  },
  {
    "objectID": "intro/tools.html#memory-efficient-data-structures",
    "href": "intro/tools.html#memory-efficient-data-structures",
    "title": "2  The Big Data Tools",
    "section": "2.2 Memory efficient data structures",
    "text": "2.2 Memory efficient data structures"
  },
  {
    "objectID": "intro/tools.html#parallel-computing",
    "href": "intro/tools.html#parallel-computing",
    "title": "2  The Big Data Tools",
    "section": "2.3 Parallel computing",
    "text": "2.3 Parallel computing"
  },
  {
    "objectID": "intro/tools.html#failure-management",
    "href": "intro/tools.html#failure-management",
    "title": "2  The Big Data Tools",
    "section": "2.4 Failure management",
    "text": "2.4 Failure management"
  },
  {
    "objectID": "intro/tools.html#scalability",
    "href": "intro/tools.html#scalability",
    "title": "2  The Big Data Tools",
    "section": "2.5 Scalability",
    "text": "2.5 Scalability"
  },
  {
    "objectID": "intro/tools.html#compute-optimization",
    "href": "intro/tools.html#compute-optimization",
    "title": "2  The Big Data Tools",
    "section": "2.6 Compute optimization",
    "text": "2.6 Compute optimization"
  },
  {
    "objectID": "intro/rules_thumb.html#the-spark-apis-let-you-use-your-language-of-preference",
    "href": "intro/rules_thumb.html#the-spark-apis-let-you-use-your-language-of-preference",
    "title": "4  Sark Rules of Thumb",
    "section": "4.1 The Spark APIs let you use your language of preference",
    "text": "4.1 The Spark APIs let you use your language of preference\nYou can use Java, Scala, Python, or R to access Spark. Like Goldilocks and the Three Bears, we want the language that is not ‘too hot’ or ‘too cold’ for data science use. Java is a bit too verbose for day-to-day data science work. Scala is fast but still a little verbose. Python is a little slower but ingrained in the data science community, and R is less easy to implement in a production environment.\n\npyspark (just right): The pyspark package looks to be the ‘just the right amount’ of the Spark APIs.\n\nsparkR (a little cold): Apache has developed an R package that is the official R connection to Spark.\nsparklyr (RStudio’s warm-up): If you are experienced with the Tidyverse, then RStudio’s sparklyr could pull you away from pyspark.\n\nYou can read a comparison of sparkR and sparklyr here."
  },
  {
    "objectID": "intro/rules_thumb.html#use-dataframes-ignore-rdds",
    "href": "intro/rules_thumb.html#use-dataframes-ignore-rdds",
    "title": "4  Sark Rules of Thumb",
    "section": "4.2 Use DataFrames (ignore RDDs)",
    "text": "4.2 Use DataFrames (ignore RDDs)\nFor day-to-day data science use, DataFrames are the option you should choose.\n\nSpark has built a framework to optimize Resilient Distributed Dataset (RDD) use when we program with DataFrame methods.\nSpark internally stores DataFrames in a binary format, so there is no need to serialize and deserialize data as it moves over the cluster.\n\nDatabricks provides a Deep Dive into Spark SQL’s Catalyst Optimizer and A Tale of Three Apache Spark APIs: RDDs vs. DataFrames and Datasets to help you understand more depth on the relationship between DataFrames.\nWe pulled the bullets and image below from the Databricks articles.\n\n\nIf you want unification and simplification of APIs across Spark Libraries, use DataFrame or Dataset.\nIf you are an R user, use DataFrames.\nIf you are a Python user, use DataFrames and resort back to RDDs if you need more control."
  },
  {
    "objectID": "intro/rules_thumb.html#write-and-read-serialized-data-formats",
    "href": "intro/rules_thumb.html#write-and-read-serialized-data-formats",
    "title": "4  Sark Rules of Thumb",
    "section": "4.3 Write and Read serialized data formats",
    "text": "4.3 Write and Read serialized data formats\nThe Apache Parquet format is optimal for most data science applications. It is a serialized columnar format that provides speed and size benefits for big data applications. The following table compares the savings and the speedup obtained by converting data into Parquet from CSV.\n\n\n\n\n\n\n\n\n\n\nDataset\nSize on Amazon S3\nQuery Run Time\nData Scanned\nCost\n\n\n\n\nData stored as CSV files\n1 TB\n236 seconds\n1.15 TB\n$5.75\n\n\nData stored in Apache Parquet Format\n130 GB\n6.78 seconds\n2.51 GB\n$0.01\n\n\nSavings\n87% less when using Parquet\n34x faster\n99% less data scanned\n99.7% savings\n\n\n\nYou could use Avro with Spark as well. It is stored in rows, much like a .csv file, but is serialized."
  },
  {
    "objectID": "databricks.html",
    "href": "databricks.html",
    "title": "Databricks",
    "section": "",
    "text": "Databricks provides data scientists and data engineers a unified platform for scalable analytics and data management with almost unlimited storage and compute capacity through the use of Spark."
  },
  {
    "objectID": "databricks/databricks_intro.html#the-elevator-pitches",
    "href": "databricks/databricks_intro.html#the-elevator-pitches",
    "title": "5  What is Databricks?",
    "section": "5.1 The elevator pitches",
    "text": "5.1 The elevator pitches\n\n\nIt’s time for DataBricks!\nDatabricks is the AI Company\nIntroduction to Databricks Unified Data Platform: 5 min demo"
  },
  {
    "objectID": "databricks/databricks_intro.html#the-details",
    "href": "databricks/databricks_intro.html#the-details",
    "title": "5  What is Databricks?",
    "section": "5.2 The details",
    "text": "5.2 The details\n\n5.2.1 Clean and reliable data\n\n\n5.2.2 Preconfigured compute resources\n\n\n5.2.3 IDE integration\nDatabricks has taken the Jupyter Notebook (.ipynb) and the classic notebook interface and built a tool that is highly responsive and usable for data scientists and engineers.\n\n\n5.2.4 multi-language support\n\n\n5.2.5 built-in advanced visualization tools"
  },
  {
    "objectID": "databricks/databricks_intro.html#footnotes",
    "href": "databricks/databricks_intro.html#footnotes",
    "title": "5  What is Databricks?",
    "section": "",
    "text": "https://www.databricks.com/spark/comparing-databricks-to-apache-spark↩︎"
  },
  {
    "objectID": "databricks/community_edition.html#community-edition-setup",
    "href": "databricks/community_edition.html#community-edition-setup",
    "title": "6  Databricks Community Edition",
    "section": "6.1 Community Edition Setup",
    "text": "6.1 Community Edition Setup\n\nCreate an account at Try Databricks\nAfter entering your name and information, find the small type link that says Get started with Community Edition -&gt; and click.\nLogin into the Databricks community edition portal\nClick the compute icon on the left ()\nCreate and Name your cluster (you will have to do this every time you log in)\nCreate a notebook and start exploring"
  },
  {
    "objectID": "databricks/community_edition.html#what-is-the-difference-between-the-databricks-community-edition-and-the-full-databricks-platform",
    "href": "databricks/community_edition.html#what-is-the-difference-between-the-databricks-community-edition-and-the-full-databricks-platform",
    "title": "6  Databricks Community Edition",
    "section": "6.2 What is the difference between the Databricks Community Edition and the full Databricks Platform?",
    "text": "6.2 What is the difference between the Databricks Community Edition and the full Databricks Platform?\n\nWith the Databricks Community Edition, the users will have access to 15GB clusters, a cluster manager, and the notebook environment to prototype simple applications, and JDBC / ODBC integrations for BI analysis. The Databricks Community Edition access is not time-limited, and users will not incur AWS costs for their cluster usage.\n\n\nThe full Databricks platform offers production-grade functionality, such as an unlimited number of clusters that easily scale up or down, a job launcher, collaboration, advanced security controls, and expert support. It helps users process data at scale, or build Apache Spark applications in a team setting.\n\n\nDatabricks\n\n\n6.2.1 Compute resources\nThe Community Edition will force you to create a new compute if your current compute resource shuts down (you cannot restart it). Cloning an old resource is available; However, any Libraries specified under the Libraries tab will not be cloned and must be respecified.\n\n\n6.2.2 Local File System and DBFS\nThe file system is restricted differently than the professional Databricks platform. Once you have enabled DBFS browsing (click user in top right &gt; select Admin Settings &gt; Workspace settings tab &gt; then enable DBFS File Browser) you can use the DBFS button that now appears after using the catalog navigation to see files stored in the Databricks File System (DBFS). You should have a FileStore folder where uploaded files will appear. After clicking the down arrow to the right of any folder or file, you can select copy path and the following popup appears.\n\nThe Spark API Format works for parsing files using the spark.read methods. The File API Format should work for packages like Pandas and Polars. However, the Community edition does not connect the dbfs drive to the main node. You will need to leverage the dbutils package in Databricks to copy the file to a local folder for Pandas and Polars to access the file.\nimport polars as pl\ndbfs_path = \"dbfs:/FileStore/patterns.parquet\"\ndriver_path = \"file:/databricks/driver/temp_read.parquet\"\ndbutils.fs.cp(dbfs_path, driver_path)\ndat = pl.read_parquet(\"temp_read.parquet\")"
  },
  {
    "objectID": "databricks/community_edition.html#using-apache-sedona-for-spatial-sql-methods",
    "href": "databricks/community_edition.html#using-apache-sedona-for-spatial-sql-methods",
    "title": "6  Databricks Community Edition",
    "section": "6.3 Using Apache Sedona for Spatial SQL Methods",
    "text": "6.3 Using Apache Sedona for Spatial SQL Methods\n\nApache Sedona is a cluster computing system for processing large-scale spatial data. Sedona extends Apache Spark with a set of out-of-the-box distributed Spatial Datasets and Spatial SQL that efficiently load, process, and analyze large-scale spatial data across machines.\n\n\nApache Sedona\n\n\nThey have an installation guide for Databricks that helps us understand the setup process so that we can leverage spatial SQL with our compute.\n\n6.3.1 Compute Configuration\nThe setup of Apache Sedona depends on the Spark version you select. We have confirmed that the following process works for 12.2 LTS (includes Apache Spark 3.3.2, Scala 2.12).\n\n\n\n6.3.2 Installing Sedona libraries for Spark\nInstalling libraries allows us to leverage third-party or custom code in our notebooks and jobs. Python, Java, Scala, and R libraries are available through your compute page’s’ Libraries’ tab. We can upload Java, Scala, and Python libraries and point to external packages in PyPI, Maven, and CRAN repositories.\n\n\n6.3.2.1 Installing the Sedona Maven Coordinates\nApache Maven provides access to a database of .jar files containing compilation instructions to upgrade your Spark environment. We can navigate to the maven installation location under libraries as shown in the picture below.\n\nApached Sedona requires two .jars for it to work in Databricks.\norg.apache.sedona:sedona-spark-shaded-3.0_2.12:1.5.1\norg.datasyslab:geotools-wrapper:1.5.1-28.2\nThe following screen shots exemplify the installation on Community edition.\n\n\n\n\n6.3.2.2 Installing the Sedona Python packages\nWe can install Python packages available to the entire Spark environment through the libraries page as well. We need two packages for Apache Sedona - apache-sedona, keplergl==0.3.2, pydeck==0.8.0. The following charts exemplify this installation on our Community edition.\n\n\n\nUnfortunately, we must go through these steps each time we start a new compute on our Community edition. It takes a few minutes for all the libraries to install. Once completed, you should see the following (Note: I have installed lets-plot as well, which is unnecessary for Sedona).\n\n\n\n\n6.3.3 Starting your notebook\nYour notebooks will need the following code for Sedona to work correctly.\nfrom sedona.register.geo_registrator import SedonaRegistrator\nSedonaRegistrator.registerAll(spark)"
  },
  {
    "objectID": "databricks/community_edition.html#using-databricks-notebooks",
    "href": "databricks/community_edition.html#using-databricks-notebooks",
    "title": "6  Databricks Community Edition",
    "section": "6.4 Using Databricks notebooks",
    "text": "6.4 Using Databricks notebooks\n\nWatch this video to see a short example of using the platform\nRead about the basics of Databricks notebooks\n\n\n6.4.1 Key links\n\nSign up for Community Edition\nA love-hate relationship with Databricks Notebooks\nDatabricks notebooks\nDatabricks Backstory"
  },
  {
    "objectID": "databricks/repo_navigation.html",
    "href": "databricks/repo_navigation.html",
    "title": "7  Navigating our examples",
    "section": "",
    "text": "You can download one file that contains all the examples as a .dbc file or download each of these specific .ipynb files.\n\nExample of Notebook Features"
  },
  {
    "objectID": "spark.html#links",
    "href": "spark.html#links",
    "title": "Spark",
    "section": "links",
    "text": "links\n\nSpark SQL, DataFrames and Datasets Guide\nChapter 4. Spark SQL and DataFrames"
  },
  {
    "objectID": "spark/spark_part_guide.html#data-science-programming",
    "href": "spark/spark_part_guide.html#data-science-programming",
    "title": "8  Using this Spark Guide",
    "section": "8.1 Data science programming",
    "text": "8.1 Data science programming\nEach language has their own view on the vocabulary of data munging. However, data science is starting to reach a point where each language is more like a dialect (British, Australian, or US English) than a unique language (Chinese, Finish, English). We are focusing on PySpark while providing dialect maps back to the top three data munging languages.\nOur first dialect discussion focuses on how each names the data object upon which we will write munging scripts. R has data.frame, Pandas has DataFrame, Pyspark has DataFrame, and SQL has TABLE to describe the rectangular rows and columns that so often represent how data is stored. In this book we will use the general dataframe to refer to all of them at once.\nEach of these data objects comes with column types or classes which facilitate data munging and analysis. Most of these types are very similar. However, they are not fully interchangable."
  },
  {
    "objectID": "spark/spark_part_guide.html#example-code-snippets",
    "href": "spark/spark_part_guide.html#example-code-snippets",
    "title": "8  Using this Spark Guide",
    "section": "8.2 Example Code Snippets",
    "text": "8.2 Example Code Snippets\nThe examples will show the similar code for each of the four most popular data munging languages to help you understand the mapping between each paradigm.\n\n8.2.1 Observable Example\n\nviewof language = Inputs.checkbox(\n  [\"Tidyverse\", \"Pandas\", \"SQL\", \"Pyspark\"], \n  { value: [\"Tidyverse\", \"Pandas\", \"Pyspark\"], \n    label: \"Display languages:\"\n  }\n)\n\n\n\n\n\n\n\nlanguage.includes(\"Pandas\")\n\n\n\n\n\n\n\nfunction checkBox(today, input) {\n    if(today.includes(input)) {\n      return input\n    } \n  }\n\n\nhtml`\n&lt;div class=\"quarto-layout-panel\"&gt;\n&lt;div class=\"quarto-layout-row quarto-layout-valign-top\"&gt;\n&lt;section id=${checkBox(language, \"Tidyverse\")} class=\"level4 unnumbered quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\"&gt;\n&lt;h4 class=\"unnumbered anchored\" data-anchor-id=${checkBox(language, \"Tidyverse\")}&gt;${checkBox(language, \"Tidyverse\")}&lt;/h4&gt;\n&lt;div class=\"sourceCode\" id=\"cb8\"&gt;&lt;pre class=\"sourceCode numberSource py number-lines code-with-copy\"&gt;&lt;code class=\"sourceCode python\"&gt;&lt;span id=\"cb8-1\"&gt;&lt;a href=\"#cb8-1\"&gt;&lt;/a&gt;df.select(&lt;span class=\"st\"&gt;\"C1\"&lt;/span&gt;, &lt;span class=\"st\"&gt;\"C2\"&lt;/span&gt;, &lt;span class=\"st\"&gt;\"C3\"&lt;/span&gt;, &lt;span class=\"st\"&gt;\"C4\"&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;button title=\"Copy to Clipboard\" class=\"code-copy-button\"&gt;&lt;i class=\"bi\"&gt;&lt;/i&gt;&lt;/button&gt;&lt;/pre&gt;&lt;/div&gt;\n&lt;/section&gt;\n`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtml`\n&lt;div class=\"quarto-layout-panel\"&gt;\n&lt;div class=\"quarto-layout-row quarto-layout-valign-top\"&gt;\n&lt;section id=${checkBox(language, \"Tidyverse\")} class=\"level4 unnumbered quarto-layout-cell\" style=\"flex-basis: 50.0%;justify-content: center;\"&gt;\n&lt;h4 class=\"unnumbered anchored\" data-anchor-id=${checkBox(language, \"Tidyverse\")}&gt;${checkBox(language, \"Tidyverse\")}&lt;/h4&gt;\n&lt;/section&gt;\n`\n\n\n\n\n\n\n\n\n\n\n8.2.2 Selecting Columns from a dataframe\n\n\n\nPyspark\ndf.select(\"C1\", \"C2\", \"C3\", \"C4\")\n\n\nSQL\nSELECT C1, C2, C3, C4\nFROM df\n\n\n\n\nR::Tidyverse\ndf |&gt; select(C1, C2, C3, C4)\n\n\nPy::Pandas\ndf.filter(items = [C1, C2, C3, C4])"
  },
  {
    "objectID": "spark/spark_intro.html#what-is-pyspark",
    "href": "spark/spark_intro.html#what-is-pyspark",
    "title": "9  What is Spark?",
    "section": "9.1 What is PySpark?",
    "text": "9.1 What is PySpark?\nPySpark supports the integration of Apache Spark and Python as a Python API for Spark. In addition, PySpark, helps you interface with Resilient Distributed Datasets (RDDs) in Apache Spark and Python programming language. PySpark refers to the collection of Python APIs for Spark.3 This book will focus on PySparkSQL and MLlib. Within Databricks we have access to the PySparkSQL methods using the spark object that is available in each notebook. Users of PySpark outside of Databricks would need to create their spark entry point with something like the following\n\nspark = SparkSession \\\n    .builder \\\n    .appName(\"Python Spark SQL basic example\") \\\n    .config(\"spark.some.config.option\", \"some-value\") \\\n    .getOrCreate()"
  },
  {
    "objectID": "spark/spark_intro.html#footnotes",
    "href": "spark/spark_intro.html#footnotes",
    "title": "9  What is Spark?",
    "section": "",
    "text": "https://www.infoworld.com/article/3236869/what-is-apache-spark-the-big-data-platform-that-crushed-hadoop.html↩︎\nhttps://databricks.com/spark/about↩︎\nhttps://www.databricks.com/glossary/pyspark↩︎"
  },
  {
    "objectID": "features/features_intro.html#spatial-unit-of-interest-derivation",
    "href": "features/features_intro.html#spatial-unit-of-interest-derivation",
    "title": "10  Feature Engineering",
    "section": "10.1 Spatial Unit of interest derivation",
    "text": "10.1 Spatial Unit of interest derivation\nThe tract_table has the county data within it. We can leverage this table to get our unit of analysis table."
  },
  {
    "objectID": "features/features_intro.html#label-creation",
    "href": "features/features_intro.html#label-creation",
    "title": "10  Feature Engineering",
    "section": "10.2 Label creation",
    "text": "10.2 Label creation\nThe idaho_temples.csv has our path to a label. We want to create a 0/1 label for has not/has a temple for each county."
  },
  {
    "objectID": "features/features_intro.html#feature-creation",
    "href": "features/features_intro.html#feature-creation",
    "title": "10  Feature Engineering",
    "section": "10.3 Feature Creation",
    "text": "10.3 Feature Creation\nWe want a clean feature that focuses on chapels for the Church of Jesus Christ of Latter-day Saints. How can we get a list of placekeys that are LDS chapels? Some regular expressions on the name will be helpful. What about day of the week attendance?\nWhat can we do to check the quality of the data."
  },
  {
    "objectID": "features/features_intro.html#temporal-considerations",
    "href": "features/features_intro.html#temporal-considerations",
    "title": "10  Feature Engineering",
    "section": "10.4 Temporal Considerations",
    "text": "10.4 Temporal Considerations\nThis data runs over COVID-19 as we have 2019 through 2022."
  },
  {
    "objectID": "features/features_intro.html#mapping-back-to-my-unit-of-analysis",
    "href": "features/features_intro.html#mapping-back-to-my-unit-of-analysis",
    "title": "10  Feature Engineering",
    "section": "10.5 Mapping back to my unit of analysis",
    "text": "10.5 Mapping back to my unit of analysis"
  },
  {
    "objectID": "training/training_intro.html#short-course-students",
    "href": "training/training_intro.html#short-course-students",
    "title": "12  Short Course Training Development",
    "section": "12.1 Short Course Students",
    "text": "12.1 Short Course Students\nShort course training is much different than the type of training you receive as a student in college. These professional pieces of training are meant to quickly provide an introduction, workable code snippets, and ways to push deeper after one or two hours. We have a small set of learning goals that we focus on to help the students get over the early-stage hurdles of the new technology. Professional short courses are filled with students with years of experience and multiple degrees, so they differ from a new first-year student in an introductory class. However, they are “freshmen” concerning the latest technology you introduce.\nThese learners will surprise you with the depth of their questions as well as the shallowness of their abilities. You need to be prepared to keep the material simple but have the background knowledge to clearly answer any depth questions that arise. This preparation requires you to have built an experience with the tool that would allow you to teach advanced material on the topic while staying focused on introductory teaching goals.\n\n\nIn college courses, our learning experiences are within a classroom that meets multiple times weekly for numerous months. That is often one part of a larger degree where multiple principles are taught beyond the technical tools of a new software package or technique. You have probably experienced a few different teaching styles from your professors. Your short course mustn’t be a 60-minute long lecture! Additionally, it is crucial that you take ownership of the material and that you provide clear examples that help the students use the new technology. They wouldn’t have come to your short course if they wanted to learn independently."
  },
  {
    "objectID": "training/training_intro.html#short-course-development",
    "href": "training/training_intro.html#short-course-development",
    "title": "12  Short Course Training Development",
    "section": "12.2 Short Course Development",
    "text": "12.2 Short Course Development\n\n12.2.1 The Goal\nExploring new technology without a guide or instructor is often a non-linear mess. Your experience as the initial explorer is different from what you want to provide to your students. You may explore multiple futile paths while finding a few clear and safe trails to give the best experience. After examining the varied approaches, you will ponder the destination and journey. What is the experience we want the student to have at completion? Is our path short enough to get them to that experience with enough time to enjoy the view?\n\n\n12.2.2 The Journey\nNow that you can see the end experience, you must use the right tools to help the students navigate the trail. Here are a few fundamental principles.\n\nGithub: Building your material on Github gives all the students rapid access to your training.\nPurpose/Introduction: Ensure your first few minutes frame the training. There is no need to sneak up on the students. Be direct and tell them the learning goals for your training. This part should take just a few minutes.\nOverviews: We must present context and details on the new technology. Expect to take time to “lecture” to get your class on the same page of understanding.\nActivities: These short courses focus on getting new tools into the hands of the student. Make sure you have hands-on activities where the students figure out how to use the tool in a real example. These activities are more than simple copy and paste. You want to give them a chance to think.\nWorking Examples: Make sure you have answers to your activities and other working examples for them to take home. The activities are often quite simple. I like to have one or two more complex examples for them to review after the class.\nBalance: It is important to balance the overviews and the activities. I ensure that my activities require as much time as any overview presentation material. It is also good to weave the overviews and balance them into shorter 5-10 blocks to provide variety.\n\n\n\n12.2.3 Completion\nThese short courses are valuable marketing tools. Make sure you have provided your contact information and that your students have references and examples that they can use to push their learning deeper. Think about how your material is organized in your Github repository so that others that find your space can learn and leverage your material without having participated in the course."
  },
  {
    "objectID": "training/training_intro.html#structuring-your-github-repository",
    "href": "training/training_intro.html#structuring-your-github-repository",
    "title": "12  Short Course Training Development",
    "section": "12.3 Structuring your Github Repository",
    "text": "12.3 Structuring your Github Repository"
  }
]